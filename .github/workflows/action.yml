on:
  push:
    branches:
      - main

env:
  DOCKER_IMAGE_TAG_NAME: pal-world
  AWS_REGION: ap-northeast-2

jobs:
  build-and-docker-push:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_TAG_NAME }}:latest

  deploy-to-ec2:
    needs: build-and-docker-push
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            # Print the environment variables for debugging
            echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}"
            echo "DOCKER_IMAGE_TAG_NAME=${{ env.DOCKER_IMAGE_TAG_NAME }}"
            echo "CLIENT_ID=${{ secrets.CLIENT_ID }}"
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}"
            echo "DB_URL=${{ secrets.DB_URL }}"
            echo "DB_USERNAME=${{ secrets.DB_USERNAME }}"
            echo "ACCESS_TOKEN_TTL=${{ secrets.ACCESS_TOKEN_TTL }}"
            echo "REFRESH_TOKEN_TTL=${{ secrets.REFRESH_TOKEN_TTL }}"
            echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}"
            echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}"
            echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}"
            echo "REDIRECT_URI=${{ secrets.REDIRECT_URI }}"
            echo "REDIS_HOST=${{ secrets.REDIS_HOST }}"
            echo "REDIS_PORT=${{ secrets.REDIS_PORT }}"

            # Check if the Docker container is running
            CONTAINER_ID=$(sudo docker ps -q --filter "publish=8080-8080")

            if [ ! -z "$CONTAINER_ID" ]; then
              echo "Stopping and removing existing container with ID $CONTAINER_ID"
              sudo docker stop $CONTAINER_ID
              sudo docker rm $CONTAINER_ID
            else
              echo "No container is running on port 8080"
            fi

            # Pull the Docker image
            echo "Pulling Docker image ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_TAG_NAME }}:latest"
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_TAG_NAME }}:latest

            # Run the Docker container
            echo "Running Docker container with image ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_TAG_NAME }}:latest"
            sudo docker run -it -d -p 8080:8080 \
                -e CLIENT_ID=${{ secrets.CLIENT_ID }} \
                -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
                -e DB_URL=jdbc:${{ secrets.DB_URL }} \
                -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
                -e ACCESS_TOKEN_TTL=${{ secrets.ACCESS_TOKEN_TTL }} \
                -e REFRESH_TOKEN_TTL=${{ secrets.REFRESH_TOKEN_TTL }} \
                -e JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }} \
                -e MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }} \
                -e MAIL_USERNAME=${{ secrets.MAIL_USERNAME }} \
                -e REDIRECT_URI=${{ secrets.REDIRECT_URI }} \
                -e REDIS_HOST=${{ secrets.REDIS_HOST }} \
                -e REDIS_PORT=${{ secrets.REDIS_PORT }} \
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_TAG_NAME }}:latest

            # Check the logs for debugging
            echo "Checking Docker container logs"
            sudo docker logs $(sudo docker ps -q --filter "publish=8080-8080")
