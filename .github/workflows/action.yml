on:
  push:
    branches:
      - main
      - dev

env:
  DOCKER_IMAGE_TAG_NAME: pal-world
  AWS_REGION: ap-northeast-2

jobs:
  build-and-docker-push:
    runs-on: ubuntu-20.04 # 실행환경

    # 실행 스텝 지정
    steps:
      - uses: actions/checkout@v3

      # java version 지정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Build
      - name: Build with Gradle
        run: ./gradlew clean build

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_TAG_NAME }}:latest

#      - name: Set up AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
#          aws-region: ${{ env.AWS_REGION }}


  deploy-to-ec2:
    needs: build-and-docker-push # 위의 build-and-docker-push 이 끝나고 실행
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            CONTAINER_ID=$(sudo docker ps -q --filter "publish=8080-8080")
            
            if [ ! -z "$CONTAINER_ID" ]; then
              sudo docker stop $CONTAINER_ID
              sudo docker rm $CONTAINER_ID
            fi
            # 여기서의 환경 변수도 여러분 상황에 맞게 작성하시면 됩니다!!!
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_TAG_NAME }}:latest
            sudo docker run -it -d -p 8080:8080 \
                -e CLIENT_ID=${{ secrets.CLIENT_ID }} \
                -e DB_PASSWORD= ${{ secrets.DB_PASSWORD }} \
                -e DB_URL=jdbc:${{ secrets.DB_URL }} \
                -e DB_USERNAME= ${{ secrets.DB_USERNAME }} \
                -e ACCESS_TOKEN_TTL= ${{ secrets.ACCESS_TOKEN_TTL }} \
                -e REFRESH_TOKEN_TTL= ${{ secrets.REFRESH_TOKEN_TTL }} \
                -e JWT_SECRET_KEY= ${{ secrets.JWT_SECRET_KEY }} \
                -e MAIL_PASSWORD= ${{ secrets.MAIL_PASSWORD}} \
                -e MAIL_USERNAME= ${{ secrets.MAIL_USERNAME}} \
                -e REDIRECT_URI= ${{ secrets.REDIRECT_URI }} \
                -e REDIS_HOST= ${{ secrets.REDIS_HOST }} \
                -e REDIS_PORT= ${{ secrets.REDIS_PORT }} \
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_TAG_NAME }}:latest
        
            
            
